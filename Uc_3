class Node
{
	public String data;
	public Node next;
	public Node previous;
	
	public Node(String data)
	{
		this.data = data;
		this.next = null;
		this.previous = null;
	}
}

public class HashTable_Remove 
{
	Node[] hashTable;
	
	public HashTable_Remove(int position)
	{
		hashTable = new Node[position];
	}
	
	public int Hash(String data)
	{
		int hashPosition = data.hashCode();
		hashPosition %= hashTable.length;
		
		if (hashPosition < 0)
		{
			hashPosition += hashTable.length;
		}
		
		System.out.println("Hash value for:" + data + "is :" + hashPosition);
		return hashPosition;
	}
	
	public void insert(String data)
	{
		int position = Hash(data);
		
		Node node = new Node(data);
		Node start = hashTable[position];
		
		if (hashTable[position] == null)
		{
			hashTable[position] = node;
		}
		else
		{
			node.next = start;
			start.previous = node;
			hashTable[position] = node;
		}
	}
	
	public void printHashTable()
	{
		for(int i = 0; i < hashTable.length; i++)
		{
			System.out.print("At :" + i);
			Node current = hashTable[i];
			
			while(current != null)
			{
				System.out.print(current.data + "\t");
				current = current.next;
			}
			System.out.println();
		}
	}
	
	 public void remove(String value)
	 {
	 		int size = 0;
	 		int position = Hash(value);
  
            Node start = hashTable[position];
  
            Node end = start;
  
            if (start.data.equals(value)) 
            {
                size--;
                if (start.next == null) 
                {
                    hashTable[position] = null;
                }
                start = start.next;
                start.previous = null;
                hashTable[position] = start;
            }
  
            while (end.next != null && !end.next.data.equals(value))
            {
                end = end.next;
            }
            
            if (end.next == null) 
            {
                System.out.println("\nElement not found\n");
            }
  
            size--;
  
            if (end.next.next == null)
            {
                end.next = null;
            }
  
            end.next.next.previous = end;
            end.next = end.next.next;
  
            hashTable[position] = start;
        
	 }

	public static void main(String args[]) 
	{
		HashTable_Remove  table = new HashTable_Remove(20);
		
		table.insert("PARANOIDS");
		table.insert("ARE");
		table.insert("NOT");	
		table.insert("PARANOIDS");
		table.insert("BECAUSE");
		table.insert("THEY");
		table.insert("ARE");
		table.insert("PARANOIDS");
		table.insert("BUT");
		table.insert("BECAUSE");
		table.insert("THEY");
		table.insert("KEEP");
		table.insert("PUTTING");
		table.insert("THEMSELVES");
		table.insert("DELIBREATELY");
		table.insert("INTO");
		table.insert("PARANOIDS");
		table.insert("AVOIDABLE");
		table.insert("SITUATION");
		
		table.remove("AVOIDABLE");
		table.printHashTable();
	}
}
